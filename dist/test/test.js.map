{"version":3,"sources":["../../test/test.js"],"names":["before","global","bundle","identifier","viewer","getAttribute","describe","it","i18n","to","not","be","an","a","requests","XMLHttpRequest","sinon","useFakeXMLHttpRequest","onCreate","xhr","push","after","restore","error","t","equal","respond","JSON","stringify","shift","eq","beforeEach","setTimeout","afterEach","value","undefined","deep","greeting"],"mappings":"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","sourcesContent":["/* eslint-env node, mocha */\n\n'use strict';\nimport { expect } from 'chai';\nimport { i18n } from '../lib';\n\nimport '@babel/polyfill';\nimport sinon from 'sinon';\n\nbefore(() => {\n    global.bundle = { identifier: 'com.dizmo.my-dizmo' };\n    global.viewer = { getAttribute: () => 'en' };\n});\n\ndescribe('i18n', () => {\n    it('should exist', () => {\n        expect(i18n).to.not.be.an('undefined');\n    });\n    it('should be a function', () => {\n        expect(i18n).to.be.a('function');\n    });\n});\n\ndescribe('i18n w/callbacks', () => {\n    const requests = [];\n    before(() => {\n        global.XMLHttpRequest = sinon.useFakeXMLHttpRequest();\n        global.XMLHttpRequest.onCreate = (xhr) => {\n            requests.push(xhr);\n        };\n    });\n    after(() => {\n        global.XMLHttpRequest.restore();\n    })\n    it('should return a translator', () => {\n        i18n((error, t) => {\n            expect(error).to.equal(null);\n            expect(t).to.be.a('function');\n        });\n        requests[0].respond(200, {\n            'Content-Type': 'application/json'\n        }, JSON.stringify({\n            '#front': { 'greeting': 'Hello World!' }\n        }));\n        requests.shift();\n    });\n    it('should return an error', () => {\n        i18n((error, t) => {\n            expect(error).to.equal('Not Found');\n            expect(t).to.eq(null)\n        });\n        requests[0].respond(404)\n        requests.shift();\n    });\n});\n\ndescribe('i18n w/await', () => {\n    describe('for status: 200 OK', () => {\n        beforeEach(() => {\n            global.XMLHttpRequest = sinon.useFakeXMLHttpRequest();\n            global.XMLHttpRequest.onCreate = (xhr) => {\n                setTimeout(() => {\n                    xhr.respond(200, {\n                        'Content-Type': 'application/json'\n                    }, JSON.stringify({\n                        '#front': { 'greeting': 'Hello World!' }\n                    }));\n                }, 0);\n            };\n        });\n        afterEach(() => {\n            global.XMLHttpRequest.restore();\n        })\n        it('should await translator', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n        });\n        it('should translate \"\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('');\n            expect(value).to.equal(undefined);\n        });\n        it('should translate \"#front\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front');\n            expect(value).to.deep.equal({\n                greeting: 'Hello World!'\n            });\n        });\n        it('should translate \"#front/greeting\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front/greeting');\n            expect(value).to.equal('Hello World!');\n        });\n        it('should translate \"#front.greeting\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front.greeting');\n            expect(value).to.equal('Hello World!');\n        });\n        it('should translate \"#front:greeting\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front:greeting', /:/);\n            expect(value).to.equal('Hello World!');\n        });\n        it('should translate \"#front|greeting\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front|greeting', '|');\n            expect(value).to.equal('Hello World!');\n        });\n        it('should translate \"#front/greeting/random\"', async () => {\n            const t = await i18n();\n            expect(t).to.be.a('function');\n            const value = t('#front.greeting.random');\n            expect(value).to.equal(undefined);\n        });\n    });\n    describe('for status: 404 Not Found', () => {\n        before(() => {\n            global.XMLHttpRequest = sinon.useFakeXMLHttpRequest();\n            global.XMLHttpRequest.onCreate = (xhr) => {\n                setTimeout(() => xhr.respond(404), 0);\n            };\n        });\n        after(() => {\n            global.XMLHttpRequest.restore();\n        })\n        it('should await error', async () => {\n            let t;\n            try {\n                t = await i18n();\n            } catch (error) {\n                expect(error).to.equal('Not Found');\n            }\n            expect(t).to.be.an('undefined');\n        });\n    });\n});\n"],"file":"test.js"}